"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

input CreateGroupInput {
  name: String!
}

type CreateGroupPayload {
  group: GroupType!
}

input CreatePostInput {
  description: String!
  link: String!
  groupId: String!
}

type CreatePostPayload {
  post: PostType!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteInviteInput {
  groupId: String!
  invitedUserId: String!
}

type DeleteInvitePayload {
  invite: InviteType!
}

input EditGroupInput {
  id: String!
  name: String!
}

type EditGroupPayload {
  group: GroupType!
}

input FavoritePostInput {
  postId: String!
}

type FavoriteType {
  userId: String!
}

input GroupArgs {
  groupId: String!
}

input GroupInvitesArgs {
  groupId: String!
}

type GroupType {
  id: String!
  name: String!
  createdAt: DateTime!
  author: UserType!
  posts: [PostType!]
}

type InviteType {
  fromUser: UserType!
  toUser: UserType!
  group: GroupType
}

input InviteUserInput {
  fromUserId: String!
  toUserId: String!
  groupId: String!
}

type InviteUserPayload {
  invite: InviteType!
}

input LogInUserInput {
  username: String!
  password: String!
}

type LogInUserPayload {
  token: String!
}

type Mutation {
  logInUser(input: LogInUserInput!): LogInUserPayload!
  inviteUser(input: InviteUserInput!): InviteUserPayload!
  createGroup(input: CreateGroupInput!): CreateGroupPayload!
  editGroup(input: EditGroupInput!): EditGroupPayload!
  deleteInvite(input: DeleteInviteInput!): DeleteInvitePayload!
  createPost(input: CreatePostInput!): CreatePostPayload!
  favoritePost(input: FavoritePostInput!): Boolean!
}

input NonGroupMembersArgs {
  groupId: String!
}

type PostType {
  id: String!
  description: String
  createdAt: DateTime!
  link: String!
  title: String
  siteName: String
  imageLink: String
  faviconLink: String
  author: UserType!
  favoritedBy: [FavoriteType!]
  group: GroupType
}

type Query {
  user: UserType
  nonGroupMembers(args: NonGroupMembersArgs!): [UserType!]!
  group(args: GroupArgs!): GroupType
  userGroups: [GroupType!]!
  userJoinedGroups: [GroupType!]!
  groupInvites(args: GroupInvitesArgs!): [InviteType!]!
  favoritePosts: [PostType!]!
  userInvites: [InviteType!]!
}

type UserType {
  id: String!
  username: String!
  imageURL: String!
}
